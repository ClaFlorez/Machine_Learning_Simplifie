#Dashboard de monitoring de mod√®le
import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from datetime import datetime, timedelta
import time

# Configuration de la page
st.set_page_config(
    page_title="Monitoring ML",
    page_icon="üìä",
    layout="wide"
)

# Titre avec style
st.markdown("""

üìä Dashboard de Monitoring ML

""", unsafe_allow_html=True)

# Simuler des donn√©es de production en temps r√©el
@st.cache_data(ttl=60)  # Cache pendant 1 minute
def generate_production_data():
    """
    G√©n√©rer des donn√©es simul√©es de production
    """
    np.random.seed(int(time.time()) % 1000)  # Seed bas√© sur le temps pour variation
    
    # G√©n√©rer 30 jours de donn√©es
    dates = pd.date_range(end=datetime.now(), periods=30, freq='D')
    
    data = []
    for date in dates:
        # Simuler des m√©triques de mod√®le avec d√©rive
        day_num = (date - dates[0]).days
        
        # Accuracy qui diminue l√©g√®rement avec le temps (data drift)
        base_accuracy = 0.95 - (day_num * 0.001) + np.random.normal(0, 0.01)
        
        # Latence qui augmente parfois (probl√®mes syst√®me)
        base_latency = 50 + (day_num * 0.5) + np.random.exponential(10)
        
        # Volume de pr√©dictions variable
        predictions_count = np.random.poisson(1000) + 500
        
        # Erreurs qui augmentent parfois
        error_rate = max(0, 0.05 + np.random.normal(0, 0.02) + (day_num * 0.0005))
        
        data.append({
            'date': date,
            'accuracy': base_accuracy,
            'latency_ms': base_latency,
            'predictions_count': predictions_count,
            'error_rate': error_rate,
            'memory_usage_gb': 2.5 + np.random.normal(0, 0.3),
            'cpu_usage_pct': 45 + np.random.normal(0, 10)
        })
    
    return pd.DataFrame(data)

# G√©n√©rer les donn√©es
production_data = generate_production_data()

# M√©triques en temps r√©el
st.markdown("### üìà M√©triques en Temps R√©el")

col1, col2, col3, col4 = st.columns(4)

# M√©triques actuelles (dernier jour)
current_metrics = production_data.iloc[-1]

with col1:
    accuracy_delta = current_metrics['accuracy'] - production_data.iloc[-2]['accuracy']
    st.metric(
        label="Accuracy",
        value=f"{current_metrics['accuracy']:.3f}",
        delta=f"{accuracy_delta:.3f}"
    )

with col2:
    latency_delta = current_metrics['latency_ms'] - production_data.iloc[-2]['latency_ms']
    st.metric(
        label="Latence (ms)",
        value=f"{current_metrics['latency_ms']:.0f}",
        delta=f"{latency_delta:.0f}"
    )

with col3:
    pred_delta = current_metrics['predictions_count'] - production_data.iloc[-2]['predictions_count']
    st.metric(
        label="Pr√©dictions/jour",
        value=f"{current_metrics['predictions_count']:,}",
        delta=f"{pred_delta:+.0f}"
    )

with col4:
    error_delta = current_metrics['error_rate'] - production_data.iloc[-2]['error_rate']
    st.metric(
        label="Taux d'Erreur",
        value=f"{current_metrics['error_rate']:.1%}",
        delta=f"{error_delta:.1%}"
    )

st.markdown("---")

# Graphiques de tendances
st.markdown("### üìä Tendances de Performance")

col1, col2 = st.columns(2)

with col1:
    # √âvolution de l'accuracy
    fig_accuracy = px.line(production_data, x='date', y='accuracy',
                          title='√âvolution de la Pr√©cision du Mod√®le')
    
    # Ajouter une ligne de seuil d'alerte
    fig_accuracy.add_hline(y=0.90, line_dash="dash", line_color="red",
                          annotation_text="Seuil d'Alerte (90%)")
    
    fig_accuracy.update_layout(height=400)
    st.plotly_chart(fig_accuracy, use_container_width=True)

with col2:
    # √âvolution de la latence
    fig_latency = px.line(production_data, x='date', y='latency_ms',
                         title='√âvolution de la Latence')
    
    # Ajouter une ligne de seuil SLA
    fig_latency.add_hline(y=100, line_dash="dash", line_color="orange",
                         annotation_text="SLA: 100ms")
    
    fig_latency.update_layout(height=400)
    st.plotly_chart(fig_latency, use_container_width=True)

# Volume et erreurs
col1, col2 = st.columns(2)

with col1:
    # Volume de pr√©dictions
    fig_volume = px.bar(production_data, x='date', y='predictions_count',
                       title='Volume de Pr√©dictions par Jour')
    fig_volume.update_layout(height=400)
    st.plotly_chart(fig_volume, use_container_width=True)

with col2:
    # Taux d'erreur
    fig_errors = px.line(production_data, x='date', y='error_rate',
                        title='√âvolution du Taux d\'Erreur')
    
    # Zone d'alerte
    fig_errors.add_hline(y=0.10, line_dash="dash", line_color="red",
                        annotation_text="Seuil Critique (10%)")
    
    fig_errors.update_layout(height=400)
    st.plotly_chart(fig_errors, use_container_width=True)

st.markdown("---")

# Analyse des ressources syst√®me
st.markdown("### üíª Ressources Syst√®me")

col1, col2 = st.columns(2)

with col1:
    # Utilisation m√©moire
    fig_memory = px.line(production_data, x='date', y='memory_usage_gb',
                        title='Utilisation M√©moire (GB)')
    fig_memory.add_hline(y=4.0, line_dash="dash", line_color="red",
                        annotation_text="Limite: 4GB")
    st.plotly_chart(fig_memory, use_container_width=True)

with col2:
    # Utilisation CPU
    fig_cpu = px.line(production_data, x='date', y='cpu_usage_pct',
                     title='Utilisation CPU (%)')
    fig_cpu.add_hline(y=80, line_dash="dash", line_color="orange",
                     annotation_text="Seuil d'Alerte: 80%")
    st.plotly_chart(fig_cpu, use_container_width=True)

# Alertes automatiques
st.markdown("### üö® Alertes Automatiques")

alerts = []

# V√©rifier les seuils
if current_metrics['accuracy'] < 0.90:
    alerts.append(("CRITIQUE", "Accuracy en dessous de 90%", "danger"))

if current_metrics['latency_ms'] > 100:
    alerts.append(("ATTENTION", "Latence au-dessus du SLA (100ms)", "warning"))

if current_metrics['error_rate'] > 0.10:
    alerts.append(("CRITIQUE", "Taux d'erreur au-dessus de 10%", "danger"))

if current_metrics['memory_usage_gb'] > 4.0:
    alerts.append(("ATTENTION", "Utilisation m√©moire √©lev√©e", "warning"))

if current_metrics['cpu_usage_pct'] > 80:
    alerts.append(("ATTENTION", "Utilisation CPU √©lev√©e", "warning"))

# D√©tecter les tendances n√©gatives
accuracy_trend = np.polyfit(range(len(production_data)), production_data['accuracy'], 1)[0]
if accuracy_trend < -0.001:
    alerts.append(("INFO", "Tendance d√©croissante de l'accuracy d√©tect√©e", "info"))

latency_trend = np.polyfit(range(len(production_data)), production_data['latency_ms'], 1)[0]
if latency_trend > 1:
    alerts.append(("INFO", "Tendance croissante de la latence d√©tect√©e", "info"))

if alerts:
    for level, message, alert_type in alerts:
        if alert_type == "danger":
            st.error(f"üî¥ {level}: {message}")
        elif alert_type == "warning":
            st.warning(f"üü° {level}: {message}")
        else:
            st.info(f"üîµ {level}: {message}")
else:
    st.success("‚úÖ Tous les indicateurs sont dans les normes")

# Bouton de rafra√Æchissement
if st.button("üîÑ Rafra√Æchir les Donn√©es", type="primary"):
    st.cache_data.clear()
    st.experimental_rerun()

# Analyse de d√©rive des donn√©es (Data Drift)
st.markdown("---")
st.markdown("### üîÑ Analyse de D√©rive des Donn√©es")

# Simuler des statistiques de features au fil du temps
feature_stats = []
for i, date in enumerate(production_data['date']):
    # Simuler une d√©rive graduelle des features
    drift_factor = i * 0.02
    
    stats = {
        'date': date,
        'feature_1_mean': 0.5 + drift_factor + np.random.normal(0, 0.1),
        'feature_1_std': 1.0 + drift_factor * 0.5 + np.random.normal(0, 0.05),
        'feature_2_mean': -0.2 + drift_factor * 0.3 + np.random.normal(0, 0.08),
        'feature_2_std': 0.8 + np.random.normal(0, 0.03)
    }
    feature_stats.append(stats)

feature_drift_data = pd.DataFrame(feature_stats)

# Graphique de d√©rive
fig_drift = make_subplots(
    rows=2, cols=2,
    subplot_titles=('Feature 1 - Moyenne', 'Feature 1 - √âcart-type',
                   'Feature 2 - Moyenne', 'Feature 2 - √âcart-type'),
    vertical_spacing=0.1
)

# Feature 1 - Moyenne
fig_drift.add_trace(
    go.Scatter(x=feature_drift_data['date'], y=feature_drift_data['feature_1_mean'],
              mode='lines+markers', name='Feature 1 Mean'),
    row=1, col=1
)

# Feature 1 - √âcart-type
fig_drift.add_trace(
    go.Scatter(x=feature_drift_data['date'], y=feature_drift_data['feature_1_std'],
              mode='lines+markers', name='Feature 1 Std'),
    row=1, col=2
)

# Feature 2 - Moyenne
fig_drift.add_trace(
    go.Scatter(x=feature_drift_data['date'], y=feature_drift_data['feature_2_mean'],
              mode='lines+markers', name='Feature 2 Mean'),
    row=2, col=1
)

# Feature 2 - √âcart-type
fig_drift.add_trace(
    go.Scatter(x=feature_drift_data['date'], y=feature_drift_data['feature_2_std'],
              mode='lines+markers', name='Feature 2 Std'),
    row=2, col=2
)

fig_drift.update_layout(height=600, title_text="√âvolution des Statistiques des Features")
st.plotly_chart(fig_drift, use_container_width=True)

# D√©tecter la d√©rive automatiquement
print("\nAnalyse de d√©rive des donn√©es:")
print("=" * 40)

# Calculer les tendances
features_to_check = ['feature_1_mean', 'feature_1_std', 'feature_2_mean', 'feature_2_std']
drift_detected = False

for feature in features_to_check:
    trend = np.polyfit(range(len(feature_drift_data)), feature_drift_data[feature], 1)[0]
    
    # Seuil de d√©rive significative
    if abs(trend) > 0.01:
        drift_detected = True
        direction = "croissante" if trend > 0 else "d√©croissante"
        print(f"‚Ä¢ {feature}: Tendance {direction} d√©tect√©e (pente: {trend:.4f})")

if not drift_detected:
    print("‚Ä¢ Aucune d√©rive significative d√©tect√©e")
else:
    print("\n‚ö†Ô∏è D√©rive des donn√©es d√©tect√©e!")
    print("Recommandations:")
    print("‚Ä¢ Investiguer les changements dans les sources de donn√©es")
    print("‚Ä¢ Consid√©rer un r√©entra√Ænement du mod√®le")
    print("‚Ä¢ Ajuster les seuils d'alerte")

# R√©sum√© du monitoring
st.markdown("### üìã R√©sum√© du Monitoring")

summary_data = {
    'M√©trique': ['Accuracy', 'Latence', 'Volume', 'Erreurs', 'M√©moire', 'CPU'],
    'Valeur Actuelle': [
        f"{current_metrics['accuracy']:.3f}",
        f"{current_metrics['latency_ms']:.0f} ms",
        f"{current_metrics['predictions_count']:,}",
        f"{current_metrics['error_rate']:.1%}",
        f"{current_metrics['memory_usage_gb']:.1f} GB",
        f"{current_metrics['cpu_usage_pct']:.0f}%"
    ],
    'Seuil': ['0.900', '100 ms', 'N/A', '10.0%', '4.0 GB', '80%'],
    'Statut': []
}

# D√©terminer le statut de chaque m√©trique
statuts = []
if current_metrics['accuracy'] >= 0.90:
    statuts.append("‚úÖ OK")
else:
    statuts.append("üî¥ ALERTE")

if current_metrics['latency_ms'] <= 100:
    statuts.append("‚úÖ OK")
else:
    statuts.append("üü° ATTENTION")

statuts.append("‚ûñ N/A")  # Volume

if current_metrics['error_rate'] <= 0.10:
    statuts.append("‚úÖ OK")
else:
    statuts.append("üî¥ ALERTE")

if current_metrics['memory_usage_gb'] <= 4.0:
    statuts.append("‚úÖ OK")
else:
    statuts.append("üü° ATTENTION")

if current_metrics['cpu_usage_pct'] <= 80:
    statuts.append("‚úÖ OK")
else:
    statuts.append("üü° ATTENTION")

summary_data['Statut'] = statuts

summary_df = pd.DataFrame(summary_data)
st.table(summary_df)

print("\nDashboard de monitoring cr√©√©!")
print("=" * 40)
print("Le dashboard inclut:")
print("‚Ä¢ M√©triques en temps r√©el avec deltas")
print("‚Ä¢ Graphiques de tendances interactifs")
print("‚Ä¢ Alertes automatiques bas√©es sur des seuils")
print("‚Ä¢ Analyse de d√©rive des donn√©es")
print("‚Ä¢ Monitoring des ressources syst√®me")
print("‚Ä¢ R√©sum√© tabulaire des statuts")
print()
print("Pour utiliser:")
print("1. Sauvegardez dans 'monitoring_dashboard.py'")
print("2. Lancez: streamlit run monitoring_dashboard.py")
print("3. Le dashboard se mettra √† jour automatiquement")
